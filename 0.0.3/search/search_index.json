{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nft-utils","text":"<p>nft-utils is an nf-test plugin to provide additional functions and assertions that fall outside of the typical nf-test features. They were primarily developed by the nf-core community but should be applicable to any nf-tests.</p>"},{"location":"#start-using-the-plugin","title":"Start using the plugin","text":"<p>To start using the plugin please add it to your <code>nf-test.config</code> file:</p> nf-test.config<pre><code>config {\n    plugins {\n        load \"nft-utils@0.0.3\"\n    }\n}\n</code></pre> <p>Have a look at the usage documentation for more information on how to start working with the plugin.</p>"},{"location":"#use-a-development-version","title":"Use a development version","text":"<p>To use the development version, please do the following steps:</p> <ul> <li>Clone the nft-utils repository</li> </ul> HTTPSSSH <pre><code>git clone git@github.com:nf-core/nft-utils.git\n</code></pre> <pre><code>git clone https://github.com/nf-core/nft-utils.git\n</code></pre> <ul> <li>Run the build script</li> </ul> <pre><code>./build.sh\n</code></pre> <ul> <li>Add the jar location (visible at the end of the build script output) to the <code>nf-test.config</code> file</li> </ul> nf-test.config<pre><code>config {\n    plugins {\n        loadFromFile \"full/path/to/the/plugin/jar\"\n    }\n}\n</code></pre>"},{"location":"usage/","title":"Functions usage","text":"<p>The plugin adds the following functions to assist with managing pipeline-level nf-test snapshots:</p>"},{"location":"usage/#removenextflowversion","title":"<code>removeNextflowVersion()</code>","text":"<p>nf-core pipelines create a yml file listing all the versions of the software used in the pipeline.</p> <p>Here is an example of this file coming from the rnaseq pipeline.</p> <pre><code>UNTAR:\n  untar: 1.34\nWorkflow:\n  nf-core/rnaseq: v3.16.0dev\n  Nextflow: 24.04.4\n</code></pre> <p>This function remove the Nextflow version from this yml file, as it is not relevant for the snapshot. Therefore for the purpose of the snapshot, it would consider this to be the contents of the YAML file:</p> <pre><code>UNTAR:\n  untar: 1.34\nWorkflow:\n  nf-core/rnaseq: v3.16.0dev\n</code></pre> <p>Usage:</p> <pre><code>assert snapshot(removeNextflowVersion(\"$outputDir/pipeline_info/nf_core_rnaseq_software_mqc_versions.yml\")).match()\n</code></pre> <p>The only argument is path to the file which must be a versions file in YAML format as per the nf-core standard.</p>"},{"location":"usage/#removefromyamlmap","title":"<code>removeFromYamlMap()</code>","text":"<p>Remove any key from a YAML file.</p> <pre><code>UNTAR:\n  untar: 1.34\nWorkflow:\n  nf-core/rnaseq: v3.16.0dev\n  Nextflow: 24.04.4\n</code></pre> <p>This function remove the Nextflow version from this yml file, as it is not relevant for the snapshot. Therefore for the purpose of the snapshot, it would consider this to be the contents of the YAML file:</p> <pre><code>UNTAR:\n  untar: 1.34\nWorkflow:\n  nf-core/rnaseq: v3.16.0dev\n</code></pre> <p>Usage:</p> <pre><code>assert snapshot(removeFromYamlMap(\"$outputDir/pipeline_info/nf_core_pipeline_software_mqc_versions.yml\", \"Workflow\", \"Nextflow\")).match()\n</code></pre> <p>The first argument is path to the YAML file, the second and third arguments are the key and subkey to remove.</p>"},{"location":"usage/#getallfilesfromdir","title":"<code>getAllFilesFromDir()</code>","text":"<p>This function generates a list of all the contents within a directory, allowing for the exclusion of specific files using a glob pattern. It can be used to obtain filenames alone, enabling snapshotting of just the names when the content is not stable. Alternatively, it can snapshot the entire list of files with stable content.</p> <p>In this example, below are the files produced by a pipeline:</p> <pre><code>results/\n\u251c\u2500\u2500 pipeline_info\n\u2502   \u2514\u2500\u2500 execution_trace_2024-09-30_13-10-16.txt\n\u2514\u2500\u2500 stable\n    \u251c\u2500\u2500 stable_content.txt\n    \u2514\u2500\u2500 stable_name.txt\n\n2 directories, 3 files\n</code></pre> <p>In this example, 1 file is stable with stable content (<code>stable_content.txt</code>), and 1 file is stable with a stable name (<code>stable_name.txt</code>). The last file has no stable content (<code>execution_trace_2024-09-30_13-10-16.txt</code>) as its name is based on the date and time of the pipeline execution.</p> <p>In this example, we aim to snapshot files with stable content, along with the names of files and folders that are stable.</p> <p>\u2022<code>stable_name</code> is a list of all files and folders, excluding those matching the glob pattern <code>pipeline_info/execution_*.{html,txt}</code>. \u2022<code>stable_content</code> is a list of all files, excluding those that match the two glob patterns: <code>pipeline_info/execution_*.{html,txt}</code> and <code>**/stable_name.txt</code>. The latter is specified in the <code>tests/getAllFilesFromDir/.nftignore</code> file. By using <code>stable_name*.name</code>, we extract the name of every file in <code>stable_name</code> and add them to the snapshot. <code>stable_content</code> can be used in the snapshot directly to include the hash of the file contents.</p> <pre><code>def stable_name    = getAllFilesFromDir(params.outdir, true, ['pipeline_info/execution_*.{html,txt}'], null, ['*', '**/*'])\ndef stable_content = getAllFilesFromDir(params.outdir, false, ['pipeline_info/execution_*.{html,txt}'], 'tests/getAllFilesFromDir/.nftignore', ['*', '**/*'])\nassert snapshot(\n  stable_name*.name,\n  stable_content\n).match()\n</code></pre> <p>\u2022 The first argument is the pipeline\u2019s <code>outdir</code> directory path. \u2022 The second argument is a boolean indicating whether to include folders. \u2022 The third argument is a list of glob patterns to ignore. \u2022 The fourth argument is a file containing additional glob patterns to ignore. \u2022 The fifth argument is a list of glob patterns to include.</p> <p><code>getAllFilesFromDir()</code> also supports named parameters:</p> <pre><code>def stable_name       = getAllFilesFromDir(params.outdir, ignore: ['pipeline_info/execution_*.{html,txt}'])\ndef stable_name_again = getAllFilesFromDir(params.outdir, include: ['stable/*'])\ndef stable_content    = getAllFilesFromDir(params.outdir, includeDir: false, ignore: ['pipeline_info/execution_*.{html,txt}'], ignoreFile: 'tests/getAllFilesFromDir/.nftignore')\n</code></pre>"},{"location":"usage/#getrelativepath","title":"<code>getRelativePath()</code>","text":"<p>This function is used to get the relative path from a list of files compared to a given directory.</p> <pre><code>results/\n\u251c\u2500\u2500 pipeline_info\n\u2502   \u2514\u2500\u2500 execution_trace_2024-09-30_13-10-16.txt\n\u2514\u2500\u2500 stable\n    \u251c\u2500\u2500 stable_content.txt\n    \u2514\u2500\u2500 stable_name.txt\n\n2 directories, 3 files\n</code></pre> <p>Following the previous example, we want to get the relative path of the stable paths in the <code>results</code> directory.</p> <pre><code>def stable_name    = getAllFilesFromDir(params.outdir, true, ['pipeline_info/execution_*.{html,txt}'], null )\n</code></pre> <p>The <code>stable_name</code> variable contains the list of stable files and folders in the <code>results</code> directory.</p> <pre><code>assert snapshot(\n  getRelativePath(stable_name, outputDir)\n).match()\n</code></pre> <p>By using <code>getRelativePath()</code> we generate in the snapshot:</p> <pre><code>\"content\": [\n    [\n        \"pipeline_info\",\n        \"stable\",\n        \"stable/stable_content.txt\",\n        \"stable/stable_name.txt\"\n    ]\n]\n</code></pre> <p>A reduced list can be generated by using <code>getAllFilesFromDir()</code> without including the folders in the output.</p> <pre><code>\"content\": [\n    [\n        \"stable/stable_content.txt\",\n        \"stable/stable_name.txt\"\n    ]\n]\n</code></pre> <p>Without using <code>getRelativePath()</code> and by using <code>*.name</code> to capture the file names, only a flat structure would be generated, as shown below:</p> <pre><code>\"content\": [\n    [\n        \"pipeline_info\",\n        \"stable\",\n        \"stable_content.txt\",\n        \"stable_name.txt\"\n    ]\n]\n</code></pre> <p><code>getAllFilesFromDir()</code> named parameters <code>relative</code> can also be used to combine the two functions:</p> <pre><code>def stable_name       = getAllFilesFromDir(params.outdir, relative: true, ignore: ['pipeline_info/execution_*.{html,txt}'] )\ndef stable_name_again = getAllFilesFromDir(params.outdir, relative: true, include: ['stable/*'] )\n</code></pre>"}]}